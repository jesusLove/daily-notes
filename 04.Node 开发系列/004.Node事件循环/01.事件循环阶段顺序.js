// ! Node 事件循环的几个阶段的（顺序）
// timers : 执行 setTimeOut、setTnterval
// pending callback：执行延迟到下一个循环迭代的 I/O 回调。
// idle,prepare：系统内部使用
// poll 轮询：新建 IO 事件，执行 IO 回调等。
// check 检测：setImmdiate 回调
// close callbacks：执行关闭函数回调

// ! 说明
// 每个阶段都有一个 任务队列 来执行回调。
// 事件循环进入某个阶段时，会执行改阶段的操作，然后执行该阶段队列中的回调
// 直到队列用尽或者最大回调数一致性，进入下一个阶段。

// ! 轮询 : 计算应该阻塞和轮询 IO 的时间；然后处理轮询队列里的事件。
// 进入轮询阶段：
// 1. 轮询队列不是空的，循环访问回调队列并同步执行，直到队伍用尽。
// 2. 轮询队列为空
// 2.1 如果有 setImmediate() 回调，则结束 轮询 阶段，进入 检查 阶段执行调度脚本。
// 2.2 如果没有 setImmediate() 回调，则继续等待直到任务添加到队列
// 3. 轮询队列为空，事件循环检查达到时间阈值。如果一个或多个计时器已经准备就绪，则回到 Timers 阶段执行计时器回调。






